"""
ü§ñ SMART CHAT HANDLER - Th√¥ng minh, tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi
======================================================

N√¢ng c·∫•p t·ª´ pattern-based ‚Üí LLM-based chat

Features:
‚úÖ Tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi (kh√¥ng c·∫ßn hardcode patterns)
‚úÖ Hi·ªÉu ng·ªØ c·∫£nh conversation
‚úÖ C√≥ tri th·ª©c v·ªÅ h√≥a ƒë∆°n/thu·∫ø
‚úÖ Ki·ªÉm tra invoice data th·ª±c
‚úÖ 3 LLM options: OpenAI (GPT-4) / Groq (FREE) / Ollama (Local)
"""

import os
import json
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime
import requests

logger = logging.getLogger(__name__)

# Import database tools
try:
    from utils.database_tools import get_database_tools
    db_tools = get_database_tools()
    logger.info("‚úÖ Database tools loaded for Smart Chat")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è Database tools not available: {e}")
    db_tools = None


class SmartChatHandler:
    """
    üß† Smart Chat with LLM
    T·ª± ƒë·ªông tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi s·ª≠ d·ª•ng AI
    """
    
    def __init__(self):
        self.llm_provider = os.getenv("LLM_PROVIDER", "groq")  # groq, openai, ollama
        self.llm_api_key = os.getenv("LLM_API_KEY", "")
        self.conversation_history = {}  # {user_id: [messages]}
        self.max_history = 10  # Keep last 10 messages
        
        logger.info(f"ü§ñ SmartChatHandler initialized with LLM: {self.llm_provider}")
        
        # Initialize LLM client
        self.setup_llm()
    
    def setup_llm(self):
        """Setup LLM provider"""
        if self.llm_provider == "openai":
            try:
                import openai
                openai.api_key = self.llm_api_key
                self.llm_client = openai
                logger.info("‚úÖ OpenAI initialized")
            except Exception as e:
                logger.error(f"‚ùå OpenAI setup failed: {e}")
                self.llm_client = None
        
        elif self.llm_provider == "groq":
            # Groq doesn't need special setup, just HTTP requests
            self.llm_client = "groq"
            logger.info("‚úÖ Groq initialized")
        
        elif self.llm_provider == "ollama":
            # Ollama runs locally
            self.llm_client = "ollama"
            logger.info("‚úÖ Ollama initialized (local)")
        
        else:
            logger.warning(f"Unknown LLM provider: {self.llm_provider}")
            self.llm_client = None
    
    async def process_message(
        self, 
        message: str, 
        user_id: str = "anonymous",
        context_data: Dict = None
    ) -> Dict[str, Any]:
        """
        üß† Process user message v√† tr·∫£ l·ªùi th√¥ng minh
        
        Args:
            message: Tin nh·∫Øn t·ª´ user
            user_id: ID c·ªßa user (ƒë·ªÉ track conversation history)
            context_data: D·ªØ li·ªáu context (invoices, templates, etc)
        
        Returns:
            {
                'message': 'AI response',
                'type': 'text',
                'confidence': 0.95,
                'data': {...}  # N·∫øu c√≥ data extracted
            }
        """
        
        try:
            logger.info(f"ü§ñ Processing message: {message[:100]}...")
            
            # 1. Get conversation history
            history = self.get_conversation_history(user_id)
            
            # 2. Build system prompt v·ªõi domain knowledge
            system_prompt = self.build_system_prompt(context_data or {})
            
            # 3. Get LLM response
            response = await self.get_llm_response(
                message=message,
                history=history,
                system_prompt=system_prompt,
                context_data=context_data
            )
            
            # 4. Update history
            self.update_history(user_id, message, response)
            
            return {
                "success": True,
                "message": response,
                "type": "text",
                "confidence": 0.95,
                "timestamp": datetime.now().isoformat()
            }
        
        except Exception as e:
            logger.error(f"‚ùå Error: {e}")
            return {
                "success": False,
                "message": f"Xin l·ªói, ƒë√£ c√≥ l·ªói: {str(e)}",
                "type": "text"
            }
    
    def build_system_prompt(self, context_data: Dict) -> str:
        """
        X√¢y d·ª±ng system prompt v·ªõi domain knowledge + REAL OCR DATA
        """
        
        base_prompt = """B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n gia v·ªÅ h√≥a ƒë∆°n v√† thu·∫ø t·∫°i Vi·ªát Nam.

H√†nh vi:
1. Lu√¥n tr·∫£ l·ªùi Ti·∫øng Vi·ªát t·ª± nhi√™n, th√¢n thi·ªán
2. Gi·∫£i th√≠ch r√µ r√†ng, chi ti·∫øt
3. N·∫øu c·∫ßn, cung c·∫•p v√≠ d·ª• c·ª• th·ªÉ
4. N·∫øu kh√¥ng ch·∫Øc ch·∫Øn, h√£y th·ª´a nh·∫≠n
5. **ƒê·∫∂C BI·ªÜT: Khi user h·ªèi v·ªÅ h√≥a ƒë∆°n, s·ª≠ d·ª•ng d·ªØ li·ªáu OCR TH·ª∞C t·ª´ database**

Ki·∫øn th·ª©c:
- H√≥a ƒë∆°n GTGT (VAT), h√≥a ƒë∆°n b√°n h√†ng
- M√£ s·ªë thu·∫ø, MST c√° nh√¢n/doanh nghi·ªáp
- H√≥a ƒë∆°n ƒëi·ªán, n∆∞·ªõc, vi·ªÖn th√¥ng
- K·∫ø to√°n, b√°o c√°o t√†i ch√≠nh c∆° b·∫£n
- Lu·∫≠t thu·∫ø hi·ªán h√†nh Vi·ªát Nam"""
        
        # üìä QUERY DATABASE FOR REAL OCR DATA
        if db_tools:
            try:
                # Get all invoices from database
                all_invoices = db_tools.get_all_invoices(limit=10)
                
                if all_invoices:
                    base_prompt += f"\n\nüìã **D·ªÆ LI·ªÜU H√ìA ƒê∆†N TH·ª∞C T·ª™ DATABASE ({len(all_invoices)} h√≥a ƒë∆°n):**"
                    
                    for inv in all_invoices:
                        base_prompt += f"\n- **{inv.get('filename', 'N/A')}**"
                        base_prompt += f"\n  ‚Ä¢ M√£ Hƒê: {inv.get('invoice_code', 'N/A')}"
                        base_prompt += f"\n  ‚Ä¢ Lo·∫°i: {inv.get('invoice_type', 'N/A')}"
                        base_prompt += f"\n  ‚Ä¢ Kh√°ch: {inv.get('buyer_name', 'N/A')}"
                        base_prompt += f"\n  ‚Ä¢ Ng∆∞·ªùi b√°n: {inv.get('seller_name', 'N/A')}"
                        base_prompt += f"\n  ‚Ä¢ T·ªïng: {inv.get('total_amount', 'N/A')}"
                        
                        # ‚úÖ Convert confidence_score to float (stored as string in DB)
                        try:
                            confidence = float(inv.get('confidence_score', 0))
                            if confidence < 1:
                                confidence = confidence * 100
                            confidence_str = f"{confidence:.1f}%"
                        except (ValueError, TypeError):
                            confidence_str = "N/A"
                        base_prompt += f"\n  ‚Ä¢ ƒê·ªô tin c·∫≠y: {confidence_str}"
                        
                        # Include raw OCR text if available
                        if inv.get('raw_text'):
                            raw_text = str(inv.get('raw_text', ''))[:200]
                            base_prompt += f"\n  ‚Ä¢ N·ªôi dung OCR: {raw_text}..."
                    
                    base_prompt += "\n\n‚ö†Ô∏è **Khi user h·ªèi v·ªÅ h√≥a ƒë∆°n, h√£y tham kh·∫£o d·ªØ li·ªáu TH·ª∞C n√†y thay v√¨ t·∫°o d·ªØ li·ªáu gi·∫£**"
                else:
                    base_prompt += "\n\nüìä Hi·ªán ch∆∞a c√≥ h√≥a ƒë∆°n n√†o trong database."
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Could not load invoice data: {e}")
        
        # Add context from request if available
        if context_data:
            invoices = context_data.get("invoices", [])
            templates = context_data.get("templates", [])
            files = context_data.get("files", [])
            
            if files:
                base_prompt += f"\n\nüìÅ **Files ƒë∆∞·ª£c upload ({len(files)} files):**"
                for f in files[:5]:
                    base_prompt += f"\n- {f.get('name', 'N/A')} ({f.get('size', 0)} bytes)"
        
        return base_prompt
    
    async def get_llm_response(
        self,
        message: str,
        history: List[Dict],
        system_prompt: str,
        context_data: Dict = None
    ) -> str:
        """
        G·ªçi LLM ƒë·ªÉ l·∫•y response
        """
        
        if self.llm_provider == "openai":
            return await self._call_openai(message, history, system_prompt)
        elif self.llm_provider == "groq":
            return await self._call_groq(message, history, system_prompt)
        elif self.llm_provider == "ollama":
            return await self._call_ollama(message, history, system_prompt)
        else:
            return "Kh√¥ng c√≥ LLM provider n√†o ƒë∆∞·ª£c c·∫•u h√¨nh"
    
    async def _call_openai(self, message: str, history: List, system_prompt: str) -> str:
        """
        G·ªçi OpenAI API (GPT-4 ho·∫∑c GPT-3.5-turbo)
        
        Gi√°:
        - GPT-3.5-turbo: $0.50 / 1M tokens (~$0.001 / message)
        - GPT-4: $0.03 / 1K tokens (~$0.03-0.05 / message)
        """
        try:
            import openai
            
            # Build messages
            messages = [
                {"role": "system", "content": system_prompt}
            ]
            
            # Add conversation history
            for msg in history[-5:]:  # Last 5 messages
                messages.append({"role": "user", "content": msg["user"]})
                messages.append({"role": "assistant", "content": msg["assistant"]})
            
            # Add current message
            messages.append({"role": "user", "content": message})
            
            # Call API
            response = await openai.ChatCompletion.acreate(
                model="gpt-3.5-turbo",  # or gpt-4
                messages=messages,
                temperature=0.7,
                max_tokens=500
            )
            
            return response.choices[0].message.content
        
        except Exception as e:
            logger.error(f"‚ùå OpenAI error: {e}")
            return f"L·ªói khi g·ªçi OpenAI: {str(e)}"
    
    async def _call_groq(self, message: str, history: List, system_prompt: str) -> str:
        """
        G·ªçi Groq API (FREE, nhanh h∆°n OpenAI)
        
        Groq l√† provider MI·ªÑN PH√ç, kh√¥ng gi·ªõi h·∫°n requests
        Model: llama-3.3-70b-versatile (LLaMA 3.3 70B - hi·ªán t·∫°i ƒë∆∞·ª£c h·ªó tr·ª£)
        
        ‚≠ê TH√äM: T√≠ch h·ª£p FastAPI ƒë·ªÉ g·ªçi camera v√† xem h√≥a ƒë∆°n
        """
        try:
            if not self.llm_api_key:
                return "‚ùå Ch∆∞a c·∫•u h√¨nh GROQ_API_KEY"
            
            # üé¨ KI·ªÇM TRA Intent: M·ªü camera ho·∫∑c xem h√≥a ƒë∆°n
            action_result = self._check_for_fastapi_actions(message)
            if action_result:
                return action_result
            
            # Build messages - ensure all content is strings
            messages = [
                {"role": "system", "content": str(system_prompt).strip()}
            ]
            
            # Add conversation history
            for msg in history[-5:]:
                user_content = str(msg.get("user", "")).strip()
                assistant_content = str(msg.get("assistant", "")).strip()
                if user_content:
                    messages.append({"role": "user", "content": user_content})
                if assistant_content:
                    messages.append({"role": "assistant", "content": assistant_content})
            
            # Add current message
            current_message = str(message).strip()
            if current_message:
                messages.append({"role": "user", "content": current_message})
            
            # Validate messages
            if len(messages) < 2:
                return "‚ùå Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ x·ª≠ l√Ω"
            
            # Log for debugging
            logger.info(f"üì§ Groq API - Model: llama-3.3-70b-versatile, Messages: {len(messages)}")
            
            # Call Groq API using groq SDK (more reliable)
            try:
                from groq import Groq
                client = Groq(api_key=self.llm_api_key)
                
                response = client.chat.completions.create(
                    model="llama-3.3-70b-versatile",
                    messages=messages,
                    temperature=0.7,
                    max_tokens=500,
                    top_p=1,
                    stream=False
                )
                
                result = response.choices[0].message.content
                logger.info(f"‚úÖ Groq response: {len(result)} chars")
                return result
                
            except Exception as sdk_error:
                logger.warning(f"‚ö†Ô∏è  Groq SDK error: {sdk_error}, falling back to httpx")
                
                # Fallback to httpx
                import httpx
                async with httpx.AsyncClient(timeout=15) as client:
                    payload = {
                        "model": "llama-3.3-70b-versatile",
                        "messages": messages,
                        "temperature": 0.7,
                        "max_tokens": 500
                    }
                    
                    logger.info(f"üì® Groq httpx payload: {payload}")
                    
                    response = await client.post(
                        "https://api.groq.com/openai/v1/chat/completions",
                        headers={
                            "Authorization": f"Bearer {self.llm_api_key}",
                            "Content-Type": "application/json"
                        },
                        json=payload
                    )
                
                logger.info(f"Groq response status: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    return data["choices"][0]["message"]["content"]
                else:
                    error_text = response.text
                    logger.error(f"Groq error: {response.status_code} - {error_text}")
                    return f"‚ùå L·ªói Groq: {response.status_code} - {error_text[:100]}"
        
        except Exception as e:
            logger.error(f"‚ùå Groq error: {type(e).__name__}: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return f"L·ªói khi g·ªçi Groq: {str(e)}"
    
    def _check_for_fastapi_actions(self, message: str) -> Optional[str]:
        """
        üé¨ Ki·ªÉm tra message c√≥ y√™u c·∫ßu:
        - M·ªü/ƒë√≥ng camera
        - Xem danh s√°ch h√≥a ƒë∆°n
        - Xu·∫•t danh s√°ch h√≥a ƒë∆°n
        
        N·∫øu c√≥, g·ªçi FastAPI backend thay v√¨ Groq
        """
        message_lower = message.lower()
        
        # üì∑ CLOSE CAMERA ACTIONS - Check n√†y tr∆∞·ªõc ƒë·ªÉ ∆∞u ti√™n
        close_camera_keywords = [
            'ƒë√≥ng camera', 'dong camera', 'ƒë√≥ng m√°y ·∫£nh', 'dong may anh',
            't·∫Øt camera', 'tat camera', 't·∫Øt m√°y ·∫£nh', 'tat may anh',
            'close camera', 'turn off camera', 'stop camera',
            'l∆∞u ·∫£nh', 'luu anh',  # Save photo - implies closing
            'xong', 'done'  # Vietnamese way of saying done/finished
        ]
        if any(kw in message_lower for kw in close_camera_keywords):
            logger.info(f"üé¨ Close camera action detected: {message}")
            return self._handle_close_camera_action(message)
        
        # üì∑ OPEN CAMERA ACTIONS
        camera_keywords = ['m·ªü camera', 'open camera', 'camera', 'ch·ª•p ·∫£nh', 'take photo', 'photo', 'm√°y ·∫£nh', 'b·∫≠t camera', 'bat camera']
        if any(kw in message_lower for kw in camera_keywords):
            logger.info(f"üé¨ Open camera action detected: {message}")
            return self._handle_camera_action(message)
        
        # üì• EXPORT ACTIONS
        export_keywords = ['xu·∫•t', 'export', 'download', 't·∫£i', 'l∆∞u file', 'save', 'l·∫•y danh s√°ch']
        if any(kw in message_lower for kw in export_keywords):
            logger.info(f"üì• Export action detected: {message}")
            return self._handle_export_action(message)
        
        # üìã INVOICE LIST ACTIONS
        invoice_keywords = ['danh s√°ch h√≥a ƒë∆°n', 'xem h√≥a ƒë∆°n', 'invoice list', 'list invoice', 'h√≥a ƒë∆°n', 'h√≥a ƒë∆°n h√¥m nay', 'h√≥a ƒë∆°n ng√†y', 'invoices']
        if any(kw in message_lower for kw in invoice_keywords):
            logger.info(f"üìã Invoice action detected: {message}")
            return self._handle_invoice_list_action(message)
        
        return None
    
    def _handle_camera_action(self, message: str) -> str:
        """üì∑ X·ª≠ l√Ω y√™u c·∫ßu m·ªü camera"""
        try:
            logger.info(f"üì∑ Camera action: {message}")
            
            # Tr·∫£ v·ªÅ th√¥ng b√°o ƒë·∫∑c bi·ªát cho frontend ƒë·ªÉ m·ªü camera
            # Format: [CAMERA_OPEN] ƒë·ªÉ frontend nh·∫≠n di·ªán
            camera_message = "[CAMERA_OPEN]\n\nüì∑ **M·ªü camera th√†nh c√¥ng!**\n\nüé• M√°y ·∫£nh ƒë√£ s·∫µn s√†ng. B·∫°n c√≥ th·ªÉ:\n‚Ä¢ Ch·ª•p ·∫£nh h√≥a ƒë∆°n\n‚Ä¢ Qu√©t m√£ QR\n‚Ä¢ Ghi video\n\nSau khi ch·ª•p xong, h√£y nh·∫•n 'L∆∞u' ƒë·ªÉ x·ª≠ l√Ω OCR ho·∫∑c n√≥i 'ƒë√≥ng camera'."
            
            logger.info(f"‚úÖ Camera opened successfully")
            return camera_message
        
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Camera error: {e}")
            return f"‚ùå L·ªói m·ªü camera: {str(e)}\n\nVui l√≤ng th·ª≠ l·∫°i."
    
    def _handle_close_camera_action(self, message: str) -> str:
        """üì∑ X·ª≠ l√Ω y√™u c·∫ßu ƒë√≥ng camera"""
        try:
            logger.info(f"üì∑ Close camera action: {message}")
            
            # Tr·∫£ v·ªÅ th√¥ng b√°o ƒë·∫∑c bi·ªát cho frontend ƒë·ªÉ ƒë√≥ng camera
            # Format: [CAMERA_CLOSE] ƒë·ªÉ frontend nh·∫≠n di·ªán
            close_message = "[CAMERA_CLOSE]\n\nüì∑ **Camera ƒë√£ ƒë√≥ng.**\n\nB·∫°n c√≥ th·ªÉ:\n‚Ä¢ M·ªü camera l·∫°i ƒë·ªÉ ch·ª•p th√™m\n‚Ä¢ Xem danh s√°ch h√≥a ƒë∆°n\n‚Ä¢ H·ªèi t√¥i v·ªÅ t√†i li·ªáu\n\nB·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?"
            
            logger.info(f"‚úÖ Camera closed successfully")
            return close_message
        
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Close camera error: {e}")
            return f"‚ùå L·ªói ƒë√≥ng camera: {str(e)}\n\nVui l√≤ng th·ª≠ l·∫°i."
    
    def _handle_invoice_list_action(self, message: str) -> str:
        """üìã X·ª≠ l√Ω y√™u c·∫ßu xem danh s√°ch h√≥a ƒë∆°n - query database + FastAPI"""
        try:
            # Ki·ªÉm tra ng√†y n·∫øu user h·ªèi theo ng√†y
            if 'h√¥m nay' in message.lower():
                time_filter = 'today'
            elif 'h√¥m qua' in message.lower():
                time_filter = 'yesterday'
            elif 'tu·∫ßn' in message.lower():
                time_filter = 'week'
            elif 'th√°ng' in message.lower():
                time_filter = 'month'
            else:
                time_filter = 'all'
            
            logger.info(f"üìã Getting invoices with time filter: {time_filter}")
            
            # N·∫øu c√≥ database tools, query database tr·ª±c ti·∫øp
            if db_tools:
                invoices = db_tools.get_all_invoices(limit=20)
                
                if not invoices:
                    return "‚ùå Kh√¥ng c√≥ h√≥a ƒë∆°n n√†o trong h·ªá th·ªëng.\n\nVui l√≤ng upload ·∫£nh h√≥a ƒë∆°n ƒë·ªÉ b·∫Øt ƒë·∫ßu."
                
                # Format danh s√°ch h√≥a ƒë∆°n
                result = f"üìã **Danh s√°ch h√≥a ƒë∆°n ({len(invoices)} h√≥a ƒë∆°n)**\n\n"
                
                for i, inv in enumerate(invoices[:10], 1):
                    # ‚úÖ Convert confidence_score to float (stored as string in DB)
                    try:
                        confidence = float(inv.get('confidence_score', 0))
                        # If confidence < 1, multiply by 100 (e.g., 0.95 -> 95%)
                        if confidence < 1:
                            confidence = confidence * 100
                        confidence_str = f"{confidence:.1f}%"
                    except (ValueError, TypeError):
                        confidence_str = "N/A"
                    
                    result += f"{i}. **{inv.get('filename', 'N/A')}**\n"
                    result += f"   ‚Ä¢ M√£ Hƒê: `{inv.get('invoice_code', 'N/A')}`\n"
                    result += f"   ‚Ä¢ Lo·∫°i: {inv.get('invoice_type', 'N/A')}\n"
                    result += f"   ‚Ä¢ Kh√°ch: {inv.get('buyer_name', 'N/A')}\n"
                    result += f"   ‚Ä¢ T·ªïng ti·ªÅn: **{inv.get('total_amount', 'N/A')}**\n"
                    result += f"   ‚Ä¢ ƒê·ªô tin c·∫≠y: {confidence_str}\n"
                    result += f"   ‚Ä¢ Ng√†y: {inv.get('invoice_date', 'N/A')}\n\n"
                
                result += "üí° **B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?**\n"
                result += "‚Ä¢ Xem chi ti·∫øt m·ªôt h√≥a ƒë∆°n: 'Xem h√≥a ƒë∆°n [s·ªë]'\n"
                result += "‚Ä¢ T√¨m ki·∫øm: 'T√¨m h√≥a ƒë∆°n [t·ª´ kh√≥a]'\n"
                result += "‚Ä¢ Th·ªëng k√™: 'Th·ªëng k√™ h√≥a ƒë∆°n'\n"
                result += "‚Ä¢ Upload th√™m: 'M·ªü camera' ho·∫∑c 'Upload ·∫£nh'"
                
                logger.info(f"‚úÖ Returned {len(invoices)} invoices from database")
                return result
            else:
                return "‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi database h√≥a ƒë∆°n. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi PostgreSQL."
        
        except Exception as e:
            logger.error(f"‚ùå Invoice list error: {e}")
            return f"‚ùå L·ªói khi l·∫•y danh s√°ch h√≥a ƒë∆°n: {str(e)}\n\nVui l√≤ng th·ª≠ l·∫°i."
    
    def _handle_export_action(self, message: str) -> str:
        """
        üì• X·ª≠ l√Ω y√™u c·∫ßu xu·∫•t h√≥a ƒë∆°n
        
        H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng:
        - Excel (.xlsx)
        - CSV (.csv)
        - PDF (.pdf)
        - JSON (.json)
        
        H·ªó tr·ª£ c√°c b·ªô l·ªçc:
        - Theo ng√†y: "xu·∫•t h√≥a ƒë∆°n ng√†y 19/10"
        - Theo th√°ng: "xu·∫•t h√≥a ƒë∆°n th√°ng 10"
        - Kho·∫£ng th·ªùi gian: "xu·∫•t h√≥a ƒë∆°n t·ª´ 1/10 ƒë·∫øn 31/10"
        """
        try:
            import re
            from datetime import datetime
            import httpx
            
            message_lower = message.lower()
            
            # üîç X√°c ƒë·ªãnh ƒë·ªãnh d·∫°ng xu·∫•t (m·∫∑c ƒë·ªãnh Excel)
            export_format = "excel"
            if "csv" in message_lower:
                export_format = "csv"
            elif "pdf" in message_lower:
                export_format = "pdf"
            elif "json" in message_lower:
                export_format = "json"
            
            # T√¨m ng√†y/th√°ng trong message
            today = datetime.now()
            start_date = None
            end_date = None
            month = None
            year = None
            
            # ‚úÖ T√¨m ki·∫øm "ng√†y dd/mm" ho·∫∑c "ng√†y dd-mm"
            date_pattern = r'ng√†y\s+(\d{1,2})[/-](\d{1,2})'
            date_match = re.search(date_pattern, message_lower)
            
            if date_match:
                day = int(date_match.group(1))
                month_num = int(date_match.group(2))
                year = today.year if month_num >= today.month else today.year
                start_date = f"{year:04d}-{month_num:02d}-{day:02d}"
                logger.info(f"üìÖ Found date: {start_date}")
            
            # ‚úÖ T√¨m ki·∫øm "th√°ng mm" ho·∫∑c "th√°ng mm/yyyy"
            month_pattern = r'th√°ng\s+(\d{1,2})(?:[/-](\d{4}))?'
            month_match = re.search(month_pattern, message_lower)
            
            if month_match:
                month = int(month_match.group(1))
                year = int(month_match.group(2)) if month_match.group(2) else today.year
                logger.info(f"üìÖ Found month: {year}-{month:02d}")
            
            # ‚úÖ T√¨m ki·∫øm "h√¥m nay", "h√¥m qua", "tu·∫ßn n√†y", "th√°ng n√†y"
            if "h√¥m nay" in message_lower or "today" in message_lower:
                start_date = today.strftime("%Y-%m-%d")
                logger.info(f"üìÖ Today: {start_date}")
            
            elif "h√¥m qua" in message_lower:
                yesterday = today - __import__("datetime").timedelta(days=1)
                start_date = yesterday.strftime("%Y-%m-%d")
                logger.info(f"üìÖ Yesterday: {start_date}")
            
            elif "tu·∫ßn n√†y" in message_lower or "this week" in message_lower:
                # L·∫•y t·ª´ th·ª© Hai c·ªßa tu·∫ßn n√†y
                monday = today - __import__("datetime").timedelta(days=today.weekday())
                start_date = monday.strftime("%Y-%m-%d")
                end_date = today.strftime("%Y-%m-%d")
                logger.info(f"üìÖ This week: {start_date} to {end_date}")
            
            elif "th√°ng n√†y" in message_lower or "this month" in message_lower:
                month = today.month
                year = today.year
                logger.info(f"üìÖ This month: {year}-{month:02d}")
            
            # üîó G·ªçi FastAPI backend
            logger.info(f"üì• Preparing export: format={export_format}, date={start_date}, month={month}")
            
            params = {}
            endpoint = None
            
            if month is not None and start_date is None:
                # Xu·∫•t theo th√°ng
                endpoint = f"http://localhost:8000/api/export/by-month/{export_format}"
                params = {"year": year, "month": month}
            
            elif start_date and end_date:
                # Xu·∫•t theo kho·∫£ng th·ªùi gian
                endpoint = f"http://localhost:8000/api/export/by-range/{export_format}"
                params = {"start_date": start_date, "end_date": end_date}
            
            elif start_date:
                # Xu·∫•t theo ng√†y
                endpoint = f"http://localhost:8000/api/export/by-date/{export_format}"
                params = {"date": start_date}
            
            else:
                # N·∫øu kh√¥ng t√¨m th·∫•y ng√†y, d√πng th√°ng hi·ªán t·∫°i
                endpoint = f"http://localhost:8000/api/export/by-month/{export_format}"
                params = {"year": today.year, "month": today.month}
                logger.info(f"üìÖ Default to current month: {today.year}-{today.month:02d}")
            
            logger.info(f"üì• Calling export endpoint: {endpoint} with params: {params}")
            
            # G·ªçi endpoint
            response = httpx.post(endpoint, params=params, timeout=30)
            
            if response.status_code == 200:
                file_size = len(response.content)
                
                # X√°c ƒë·ªãnh t√™n file
                if month is not None and not end_date:
                    filename = f"ho√°_ƒë∆°n_{year}_{month:02d}.{export_format if export_format != 'excel' else 'xlsx'}"
                    time_desc = f"th√°ng {month}/{year}"
                elif end_date:
                    filename = f"ho√°_ƒë∆°n_{start_date}_ƒë·∫øn_{end_date}.{export_format if export_format != 'excel' else 'xlsx'}"
                    time_desc = f"t·ª´ {start_date} ƒë·∫øn {end_date}"
                else:
                    filename = f"ho√°_ƒë∆°n_{start_date}.{export_format if export_format != 'excel' else 'xlsx'}"
                    time_desc = f"ng√†y {start_date}"
                
                return f"""‚úÖ **Xu·∫•t h√≥a ƒë∆°n th√†nh c√¥ng!**

üìã **Chi ti·∫øt:**
‚Ä¢ Th·ªùi gian: {time_desc}
‚Ä¢ ƒê·ªãnh d·∫°ng: {export_format.upper()}
‚Ä¢ K√≠ch th∆∞·ªõc file: {file_size:,} bytes
‚Ä¢ T√™n file: `{filename}`

üì• **File ƒë√£ s·∫µn s√†ng ƒë·ªÉ t·∫£i xu·ªëng!**

üí° **G·ª£i √Ω ti·∫øp theo:**
‚Ä¢ N·∫øu b·∫°n mu·ªën xu·∫•t ng√†y kh√°c, c·ª© n√≥i: "Xu·∫•t h√≥a ƒë∆°n ng√†y 15/10"
‚Ä¢ Ho·∫∑c: "Xu·∫•t h√≥a ƒë∆°n th√°ng 9"
‚Ä¢ Ho·∫∑c: "Xu·∫•t h√≥a ƒë∆°n t·ª´ 1/10 ƒë·∫øn 31/10"
"""
            
            elif response.status_code == 404:
                data = response.json()
                return f"‚ö†Ô∏è **Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu**\n\nKh√¥ng c√≥ h√≥a ƒë∆°n n√†o trong kho·∫£ng th·ªùi gian b·∫°n ch·ªçn.\n\nTh√¥ng b√°o: {data.get('detail', 'Unknown')}"
            
            else:
                return f"‚ùå **L·ªói xu·∫•t h√≥a ƒë∆°n** (Code {response.status_code})\n\nVui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n."
        
        except Exception as e:
            logger.error(f"‚ùå Export error: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return f"‚ùå L·ªói khi xu·∫•t h√≥a ƒë∆°n: {str(e)}\n\nVui l√≤ng ki·ªÉm tra l·∫°i y√™u c·∫ßu."
    
    async def _call_ollama(self, message: str, history: List, system_prompt: str) -> str:
        """
        G·ªçi Ollama (ch·∫°y local, MI·ªÑN PH√ç, kh√¥ng c·∫ßn API key)
        
        Setup:
        1. Download Ollama: https://ollama.ai
        2. Ch·∫°y: ollama run llama2-vietnamese
        3. M·∫∑c ƒë·ªãnh port 11434
        """
        try:
            # Build messages
            messages = [
                {"role": "system", "content": system_prompt}
            ]
            
            # Add conversation history
            for msg in history[-5:]:
                messages.append({"role": "user", "content": msg["user"]})
                messages.append({"role": "assistant", "content": msg["assistant"]})
            
            # Add current message
            messages.append({"role": "user", "content": message})
            
            # Call Ollama
            import httpx
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    "http://localhost:11434/api/chat",
                    json={
                        "model": "llama2-vietnamese",  # or llama2, mistral, etc
                        "messages": messages,
                        "stream": False
                    },
                    timeout=30
                )
            
            if response.status_code == 200:
                data = response.json()
                return data["message"]["content"]
            else:
                logger.error(f"Ollama error: {response.status_code}")
                return f"L·ªói Ollama: {response.status_code}"
        
        except Exception as e:
            logger.error(f"‚ùå Ollama error: {e}")
            return f"L·ªói khi g·ªçi Ollama (ch·∫Øc ch·∫Øn ƒë√£ ch·∫°y ollama serve ch∆∞a?): {str(e)}"
    
    def get_conversation_history(self, user_id: str) -> List[Dict]:
        """L·∫•y l·ªãch s·ª≠ conversation c·ªßa user"""
        if user_id not in self.conversation_history:
            self.conversation_history[user_id] = []
        return self.conversation_history[user_id]
    
    def update_history(self, user_id: str, user_message: str, assistant_message: str):
        """C·∫≠p nh·∫≠t l·ªãch s·ª≠ conversation"""
        if user_id not in self.conversation_history:
            self.conversation_history[user_id] = []
        
        self.conversation_history[user_id].append({
            "user": user_message,
            "assistant": assistant_message,
            "timestamp": datetime.now().isoformat()
        })
        
        # Keep only last N messages to save memory
        if len(self.conversation_history[user_id]) > self.max_history:
            self.conversation_history[user_id] = self.conversation_history[user_id][-self.max_history:]


# Global instance
smart_chat_handler = SmartChatHandler()
